---
- hosts:
  - gmktec
  - alienware
  - blueantec
  - system76laptop
  - antecbackup
  tasks:
  - name: Install required packages (needed for longhorn and other tooling)
    become: true
    ansible.builtin.apt:
      name:
        - open-iscsi
        # for Longhorn
        # this may also require some kernel adjustments
        # this script checks to see if any requirements are missing
        # $ curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v1.8.1/scripts/environment_check.sh | bash
        # sudo modprobe iscsi_tcp
        - jq
        - nfs-common
        - cryptsetup
      state: latest
      install_recommends: yes
      update_cache: no
  - name: Install Helm binary
    become: true
    ansible.builtin.unarchive:
      # https://github.com/helm/helm/releases
      src: https://get.helm.sh/helm-v3.18.2-linux-amd64.tar.gz
      dest: /usr/local/bin/
      extra_opts: "--strip-components=1" # skip first folder
      owner: root
      group: root
      mode: 0755
      remote_src: true
  - name: Download argo-cd binary CLI
    become: true
    ansible.builtin.get_url:
      # https://github.com/argoproj/argo-cd/releases/
      url: https://github.com/argoproj/argo-cd/releases/download/v3.0.6/argocd-linux-amd64
      dest: /usr/local/bin/argocd
      owner: root
      group: root
      mode: 0755
  - name: Install Nova binary
    become: true
    ansible.builtin.unarchive:
      # https://github.com/FairwindsOps/nova/releases
      src: https://github.com/FairwindsOps/nova/releases/download/v3.11.3/nova_3.11.3_linux_amd64.tar.gz
      dest: /usr/local/bin/
      owner: root
      group: root
      mode: 0755
      remote_src: true
  - name: Install cert-manager cmctl binary
    become: true
    ansible.builtin.unarchive:
      # https://github.com/cert-manager/cmctl/releases
      src: https://github.com/cert-manager/cmctl/releases/download/v2.2.0/cmctl_linux_amd64.tar.gz
      dest: /usr/local/bin/
      owner: root
      group: root
      mode: 0755
      remote_src: true
  - name: Download k3s script
    ansible.builtin.get_url:
      url: https://get.k3s.io
      dest: /tmp/k3s.sh
  - name: Install k3s on master
    when: inventory_hostname in ['gmktec']
    become: true
    # https://github.com/k3s-io/k3s/releases
    # we disable local-storage so we can use longhorn later
    # https://docs.k3s.io/cli/server
    ansible.builtin.shell: cat /tmp/k3s.sh | K3S_KUBECONFIG_MODE="644" K3S_TOKEN={{ token | quote }} INSTALL_K3S_VERSION=v1.33.1+k3s1 sh -s - server --cluster-init --tls-san {{ loadbalancer | quote }} --disable servicelb --disable local-storage
  - name: Install k3s on other nodes
    when: inventory_hostname in ['blueantec', 'alienware', 'antecbackup']
    become: true
    ansible.builtin.shell: cat /tmp/k3s.sh | K3S_KUBECONFIG_MODE="644" K3S_TOKEN={{ token | quote }} INSTALL_K3S_VERSION=v1.33.1+k3s1 sh -s - server --server https://{{ master | quote }}:6443 --tls-san {{ loadbalancer | quote }} --disable servicelb --disable local-storage
  - name: Install k3s on laptop with just control plane, this way no workloads get assigned
    when: inventory_hostname in ['system76laptop']
    become: true
    ansible.builtin.shell: cat /tmp/k3s.sh | K3S_KUBECONFIG_MODE="644" K3S_TOKEN={{ token | quote }} INSTALL_K3S_VERSION=v1.33.1+k3s1 sh -s - server --node-taint CriticalAddonsOnly=true:NoExecute --server https://{{ master | quote }}:6443 --tls-san {{ loadbalancer | quote }} --disable servicelb --disable-etcd --disable local-storage
  - name: Set load balancer IP in /etc/rancher/k3s/k3s.yaml
    become: true
    ansible.builtin.replace:
      path: /etc/rancher/k3s/k3s.yaml
      regexp: '(server\:\shttps:\/\/).+(\:6443)'
      replace: '\g<1>{{ loadbalancer }}\g<2>'
  # https://docs.k3s.io/installation/private-registry
  - name: Adjust mirrors to use our local pull-through-cache
    become: true
    ansible.builtin.copy:
      dest: "/etc/rancher/k3s/registries.yaml"
      owner: root
      group: root
      mode: '0644'
      content: |
        mirrors:
          docker.io:
            endpoint:
              - "http://192.168.1.226:5001"
          ghcr.io:
            endpoint:
              - "http://192.168.1.226:5001"
          gcr.io:
            endpoint:
              - "http://192.168.1.226:5001"
          quay.io:
            endpoint:
              - "http://192.168.1.226:5001"
          lscr.io:
            endpoint:
              - "http://192.168.1.226:5001"
          ecr.aws:
            endpoint:
              - "http://192.168.1.226:5001"
          mcr.microsoft.com:
            endpoint:
              - "http://192.168.1.226:5001"
          registry.k8s.io:
            endpoint:
              - "http://192.168.1.226:5001"
          192.168.1.226:5000:
            endpoint:
              - "http://192.168.1.226:5000"
        configs:
          "192.168.1.226:5000":
            tls:
              insecure_skip_verify: true
          "192.168.1.226:5001":
            tls:
              insecure_skip_verify: true
  # - name: make sure k3s has restarted to take advantage of settings
  #   become: true
  #   service:
  #     name: k3s
  #     state: restarted
  #     enabled: yes
  - name: Create a directory if it does not exist
    ansible.builtin.file:
      path: ~/.kube/
      state: directory
      mode: u=rwx,g=rx,o-rwx
  - name: Copy config file to home directory
    ansible.builtin.copy:
      src: /etc/rancher/k3s/k3s.yaml
      dest: ~/.kube/config
      owner: carlsonp
      group: carlsonp
      mode: u=rw,g-rwx,o-rwx
  - name: Wait for cluster handshake and spinup
    ansible.builtin.pause:
      seconds: 5
  - name: Get node status
    ansible.builtin.command: kubectl get nodes
    register: kubenodes
  - name: Show kubectl get nodes result
    ansible.builtin.debug: msg="{{ kubenodes.stdout }}"
  - name: Add Helm repos
    ansible.builtin.command: "{{ item }}"
    with_items:
      - helm repo add longhorn https://charts.longhorn.io
      - helm repo add sealed-secrets https://bitnami-labs.github.io/sealed-secrets/
      - helm repo add metallb https://metallb.github.io/metallb
      # - helm repo add milvus https://milvus-io.github.io/milvus-helm/
      # - helm repo add rancher-stable https://releases.rancher.com/server-charts/stable
      - helm repo add jetstack https://charts.jetstack.io
      # - helm repo add argo https://argoproj.github.io/argo-helm
      # - helm repo add authelia https://charts.authelia.com
      # - helm repo add bitnami https://charts.bitnami.com/bitnami
      # - helm repo add aqua https://aquasecurity.github.io/helm-charts/
      # - helm repo add weaviate https://weaviate.github.io/weaviate-helm
  - name: Update Helm repos
    ansible.builtin.command: helm repo update
  # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/helm_module.html
  # some of these applications are needed to be installed here as opposed to
  # in FluxCD because the CRDs need to be created and available first
  - name: Install metallb load balancer
    when: inventory_hostname in ['system76laptop']
    kubernetes.core.helm:
      release_name: metallb
      chart_ref: metallb/metallb
      release_namespace: metallb-system
      create_namespace: true
      wait: true
  - name: Install sealed secrets
    when: inventory_hostname in ['system76laptop']
    kubernetes.core.helm:
      release_name: sealed-secrets
      chart_ref: sealed-secrets/sealed-secrets
      release_namespace: kube-system
      create_namespace: true
      wait: true
  - name: Install cert-manager
    when: inventory_hostname in ['system76laptop']
    kubernetes.core.helm:
      release_name: cert-manager
      chart_ref: jetstack/cert-manager
      release_namespace: cert-manager
      create_namespace: true
      wait: true
      values:
        installCRDs: true
  - name: Install longhorn
    when: inventory_hostname in ['system76laptop']
    kubernetes.core.helm:
      release_name: longhorn
      chart_ref: longhorn/longhorn
      release_namespace: longhorn-system
      create_namespace: true
      wait: true
  - name: Download Flux CLI
    # https://fluxcd.io/flux/installation/
    ansible.builtin.get_url:
      url: https://fluxcd.io/install.sh
      dest: /tmp/install-flux.sh
      mode: 0755
  - name: Install Flux CLI
    become: true
    ansible.builtin.shell: bash /tmp/install-flux.sh
  - name: Install k9s terminal client for Kubernetes
    # https://github.com/derailed/k9s/releases
    become: true
    ansible.builtin.apt:
      deb: https://github.com/derailed/k9s/releases/download/v0.50.6/k9s_linux_amd64.deb
      install_recommends: yes
      update_cache: no
  - name: Download Longhorn binary CLI
    become: true
    ansible.builtin.get_url:
      # https://github.com/longhorn/cli/releases
      url: https://github.com/longhorn/cli/releases/download/v1.9.0/longhornctl-linux-amd64
      dest: /usr/local/bin/longhornctl
      owner: root
      group: root
      mode: 0755
  # for bitnami sealed secrets in k8s
  - name: Download kubeseal binary CLI
    become: true
    ansible.builtin.unarchive:
      # https://github.com/bitnami-labs/sealed-secrets/releases
      src: https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.30.0/kubeseal-0.30.0-linux-amd64.tar.gz
      dest: /usr/local/bin/
      owner: root
      group: root
      mode: 0755
      remote_src: true
  - name: Add taint for pop-os so no pods get assigned
    when: inventory_hostname in ['system76laptop']
    ansible.builtin.shell: kubectl taint --overwrite nodes pop-os key=NoSchedule:NoSchedule
  - name: Take a backup of the sealed secrets private key
    when: inventory_hostname in ['system76laptop']
    ansible.builtin.shell: kubectl get secret -n kube-system -l sealedsecrets.bitnami.com/sealed-secrets-key -o yaml > sealed-secrets-key-backup.yaml