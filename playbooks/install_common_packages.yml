---
- hosts: ubuntu
  vars:
    ubuntu_codename: jammy # 22.04 LTS
  tasks:
  - name: Get DEB architecture
    ansible.builtin.shell: dpkg --print-architecture
    register: deb_architecture # arm64 or amd64
  - name: DEB architecture
    debug:
      msg: "deb_architecture['stdout']: {{ deb_architecture['stdout'] }}"
  - name: install common packages
    become: true
    # https://docs.ansible.com/ansible/2.9/modules/apt_module.html#apt-module
    apt:
      name:
        - nano
        - openssh-server
        - rsync
        - aptitude
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common
        - wget
        - python3
        - python3-pip
        - lsb-release
        - gnupg
        - zip
        - unzip
        - zfsutils-linux
        - build-essential
        - gparted
        - smartmontools
        - fdisk
        - gnome-disk-utility
        - vlc
        - gitk
        - git-core
        - git-gui
        - vnstat
        - synaptic
        - gftp
        - htop
        - default-jdk
        - zfs-auto-snapshot
        - open-iscsi
        - jq
        - lm-sensors
        - nload
        - ncdu
        - tmux
      state: latest
      update_cache: yes
      cache_valid_time: 3600 # only update cache if it hasn't been updated in the last hour
      install_recommends: yes
  - name: add GPG key for docker
    become: true
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present
  - name: add docker repository to apt
    become: true
    apt_repository:
      repo: deb [arch={{ deb_architecture['stdout'] }}] https://download.docker.com/linux/ubuntu {{ ubuntu_codename }} stable
      state: present
  - name: install docker via apt
    become: true
    apt:
      name:
        - docker-ce
        - docker-ce-cli
        - containerd.io
      state: latest
      update_cache: yes
  - name: Adjust Docker settings for registries and pull-through-cache
    become: true
    ansible.builtin.copy:
      dest: "/etc/docker/daemon.json"
      owner: root
      group: root
      mode: '0644'
      content: |
        {
        "insecure-registries": ["192.168.1.226:5000", "http://192.168.1.226:5001"],
        "registry-mirrors": ["http://192.168.1.226:5001"],
        "features": {
            "buildkit" : true
          }
        }
  # post-install Docker steps
  # https://docs.docker.com/engine/install/linux-postinstall/
  - name: make sure docker group exists
    become: true
    ansible.builtin.group:
      name: docker
      state: present
  - name: add this user to docker group
    become: true
    ansible.builtin.user:
      name: '{{ ansible_user_id }}'
      groups: docker
      append: yes # this ensures it will add-to and not replace all groups
  - name: make sure docker has restarted to take advantage of settings
    become: true
    service:
      name: docker
      state: restarted
      enabled: yes
  - name: Wait for DNS to come back up
    ansible.builtin.pause:
      seconds: 10

  # install latest docker-compose
  # https://docs.docker.com/compose/cli-command/#install-on-linux
  - name: create directory for docker-compose
    ansible.builtin.file:
      path: ~/.docker/cli-plugins/
      state: directory
      mode: '0775'
  - name: ansible architecture
    debug:
      msg: "ansible_architecture: {{ ansible_architecture }}" # x86_64 or aarch64
  - name: download and place docker-compose v2 binary
    ansible.builtin.get_url:
      url: https://github.com/docker/compose/releases/latest/download/docker-compose-linux-{{ ansible_architecture }}
      dest: ~/.docker/cli-plugins/docker-compose
      mode: '0775'
  
  # install rclone
  - name: download latest rclone
    become: true
    ansible.builtin.get_url:
      # deb_architecture is amd64 or arm64
      url: https://downloads.rclone.org/rclone-current-linux-{{ deb_architecture['stdout'] }}.zip
      dest: /tmp
  - name: extract rclone zip
    become: true
    ansible.builtin.unarchive:
      src: /tmp/rclone-current-linux-{{ deb_architecture['stdout'] }}.zip
      dest: /usr/bin/
      extra_opts: -j # skip the first folder, dump the contents
      remote_src: yes

  # install visual studio code
  - name: install visual studio code for amd64
    become: true
    apt:
      deb: https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64
    when: deb_architecture['stdout'] == "amd64"
  - name: install visual studio code for arm64
    become: true
    apt:
      deb: https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-arm64
    when: deb_architecture['stdout'] == "arm64"
